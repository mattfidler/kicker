;;; Snippet definitions:
;;;
(yas/define-snippets 'text-mode
                     '(("email" "`(replace-regexp-in-string \"@\" \"@NOSPAM.\" user-mail-address)`" "(user's email)" nil nil nil nil nil nil)
                       ("fina" "fenafloxicin" "fenafloxicin" nil nil nil nil nil nil)
                       ("time" "`(current-time-string)`" "(current time)" nil nil nil nil nil nil)))


;;; Snippet definitions:
;;;
(yas/define-snippets 'text-mode
                     '(("email" "`(replace-regexp-in-string \"@\" \"@NOSPAM.\" user-mail-address)`" "(user's email)" nil nil nil nil nil nil)
                       ("time" "`(current-time-string)`" "(current time)" nil nil nil nil nil nil)))


;;; Snippet definitions:
;;;
(yas/define-snippets 'org-mode
                     '(("author" "#+AUTHOR: ${1:`user-full-name`}\n" "Author" nil nil nil nil nil nil)
                       ("block" "#+BEGIN_${1:$$(upcase yas/text)} $2\n  $0\n#+END_${1:$(upcase text)}\n" "#+begin_...#+end_" nil nil
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        nil nil nil)
                       ("desc" "#+DESCRIPTION: ${0}\n" "DESCRIPTION" nil nil nil nil nil nil)
                       ("dita" "#+BEGIN_DITAA ${1:export-file-name} -r -S -E\n${0}\n#+END_DITAA\n" "DITAA" nil nil nil nil nil nil)
                       ("docbook" "#+BEGIN_DOCBOOK\n${0}\n#+END_DOCBOOK\n" "DOCBOOK" nil nil nil nil nil nil)
                       ("email" "#+EMAIL: ${1:`user-mail-address`}\n" "Email" nil nil nil nil nil nil)
                       ("example" "#+BEGIN_EXAMPLE\n${0}\n#+END_EXAMPLE\n" "Example block" nil nil nil nil nil nil)
                       ("figure" "#+attr_latex: width=$1\\textwidth\n[[file:$2.pdf]]\n$0\n" "figure" nil nil nil nil nil nil)
                       ("fprop" "#+PROPERTY: $1\n$0" "File Based Property" nil nil nil nil nil nil)
                       ("html" "#+BEGIN_HTML\n${0}\n#+END_HTML\n" "HTML" nil nil nil nil nil nil)
                       ("inc" "#+INCLUDE: \"${1:file}\" ${2:src-example-quote} ${3:mode}\n\n" "Include" nil nil nil nil nil nil)
                       ("keywords" "#+KEYWORDS: ${0}\n" "KEYWORDS" nil nil nil nil nil nil)
                       ("lang" "#+LANGUAGE: ${1:en}\n" "LANGUAGE" nil nil nil nil nil nil)
                       ("latex" "#+BEGIN_LATEX\n${0}\n#+END_LATEX\n" "LATEX" nil nil nil nil nil nil)
                       ("options" "#+OPTIONS: ${0}\n\n" "OPTIONS" nil nil nil nil nil nil)
                       ("prop" " :PROPERTIES:\n :VISIBILITY:folded:\n :END:\n" "Properties Folded" nil nil nil nil nil nil)
                       ("res" "#+RESNAME:\n\n" "Org-Babel RESNAME Block" nil nil nil nil nil nil)
                       ("sb" "#+name: ${1:name}\n#+begin_src ${2:language} $3\n  $0\n#+end_src\n" "#+srcname:..#+begin_src...#+end_src" nil nil
                        ((yas/indent-line 'fixed)
                         (yas/wrap-around-region 'nil))
                        nil nil nil)
                       ("seq" "#+SEQ_TODO: ${1:STATES} | ${2:FINISHED}\n" "SEQ TODO" nil nil nil nil nil nil)
                       ("src" "#+BEGIN_SRC $1$>\n$0$>\n#+END_SRC$>\n" "Source Code Block" nil nil nil nil nil nil)
                       ("srcbat" "#+BEGIN_SRC ntcmd\n$0\n#+END_SRC\n" "Batch File Source"
                        (fboundp 'ntcmd-mode)
                        nil nil nil nil nil)
                       ("srcc" "#+BEGIN_SRC C\n$0$>\n#+END_SRC$>\n" "C Source Code Block" nil nil nil nil nil nil)
                       ("srcpp" "#+BEGIN_SRC c++\n$0$>\n#+END_SRC$>" "C++ Source Code Block" nil nil nil nil nil nil)
                       ("srccs" "#+BEGIN_SRC csharp\n$0$>\n#+END_SRC$>\n" "C# Source Code Block" nil nil nil nil nil nil)
                       ("srccss" "#+BEGIN_SRC css\n$0$>\n#+END_SRC$>" "CSS Source Code Block" nil nil nil nil nil nil)
                       ("srcel" "#+BEGIN_SRC emacs-lisp\n$0$>\n#+END_SRC$>\n" "emacs-lisp Source Code Block" nil nil nil nil nil nil)
                       ("srcesn" "#+BEGIN_SRC esn\n$0\n#+END_SRC" "Emacs Speaks NONMEM source" nil nil nil nil nil nil)
                       ("srchtml" "#+BEGIN_SRC html\n$0$>\n#+END_SRC$>" "HTML Source Code Block" nil nil nil nil nil nil)
                       ("srcini" "#+BEGIN_SRC conf\n$0\n#+END_SRC" "Configuration Mode Source" nil nil nil nil nil nil)
                       ("srclatex" "#+BEGIN_SRC latex\n$0$>\n#+END_SRC$>" "LaTeX Source Code Block" nil nil nil nil nil nil)
                       ("srcnsi" "#+BEGIN_SRC nsis\n$0$>\n#+END_SRC$>\n" "NSIS source" nil nil nil nil nil nil)
                       ("srcnsis" "#+BEGIN_SRC nsis\n$0\n#+END_SRC" "NSIS Source" nil nil nil nil nil nil)
                       ("srcpl" "#+BEGIN_SRC perl\n$0$>\n#+END_SRC$>\n" "Perl Source Code Block" nil nil nil nil nil nil)
                       ("srcpy" "#+BEGIN_SRC python\n$0$>\n#+END_SRC$>\n" "Python Source Code Block" nil nil nil nil nil nil)
                       ("srcr" "#+BEGIN_SRC R\n$0$>\n#+END_SRC$>\n" "R Source Code Block" nil nil nil nil nil nil)
                       ("srcrb" "#+BEGIN_SRC ruby\n$0$>\n#+END_SRC$>\n" "Ruby Source Code Block" nil nil nil nil nil nil)
                       ("srcsh" "#+BEGIN_SRC sh\n$0$>\n#+END_SRC$>\n" "Shell Source Code Block" nil nil nil nil nil nil)
                       ("srcvbs" "#+BEGIN_SRC visual-basic\n$0\n#+END_SRC" "Visual Basic Source" nil nil nil nil nil nil)
                       ("startup" "#+STARTUP: ${1:options}\n" "Startup" nil nil nil nil nil nil)
                       ("tags" "#+TAGS: $0\n" "Tags" nil nil nil nil nil nil)
                       ("text" "#+TEXT: ${1:text}\n" "Text" nil nil nil nil nil nil)
                       ("title" "#+TITLE: ${1:title}\n" "Title Block" nil nil nil nil nil nil)))


;;; Snippet definitions:
;;;
(yas/define-snippets 'text-mode
                     '(("email" "`(replace-regexp-in-string \"@\" \"@NOSPAM.\" user-mail-address)`" "(user's email)" nil nil nil nil nil nil)
                       ("time" "`(current-time-string)`" "(current time)" nil nil nil nil nil nil)))


;;; Snippet definitions:
;;;
(yas/define-snippets 'text-mode
                     '(("email" "`(replace-regexp-in-string \"@\" \"@NOSPAM.\" user-mail-address)`" "(user's email)" nil nil nil nil nil nil)
                       ("time" "`(current-time-string)`" "(current time)" nil nil nil nil nil nil)))



#+title: ESS startup file -- EmacsPortable
#+author: Matthew Fidler

* Initialize Emacs Speaks Statistics

I look for any version of R-portable I have used in the past and add
it to the exec-path.

Looking for R-portable has been moved to the [[../source/nsi/EmacsPortableApp.nsi]]
#+begin_src emacs-lisp
  (when (not (boundp 'ess-mode-hook))
    (setq ess-mode-hook nil ))
  (defun kicker-turn-on-ess-eldoc ()
    (require 'ess-eldoc))
  (add-hook 'ess-mode-hook 'kicker-turn-on-ess-eldoc)
  
  (autoload 'ess-mode "ess-site" "ESS" 't)
  (autoload 'ess-site "ess-site" "ESS" 't)
  (autoload 'Rd-mode "ess-site" "ESS" 't)
  (autoload 'R-mode "ess-site" "ESS" 't)
  (autoload 'Rnw-mode "ess-site" "ESS" 't)
  (autoload 'S-mode "ess-site" "ESS" 't)
  (autoload 'sas-mode "ess-site" "ESS" 't)
  (autoload 'stata-mode "ess-site" "ESS" 't)
  (when (eq system-type 'windows-nt)
    (when (file-exists-p "c:/progra~1/TIBCO/splus81/cmd/Splus.exe")
      (setq-default inferior-S+6-program-name
                    "c:/progra~1/TIBCO/splus81/cmd/Splus.exe")
      (setq-default inferior-Sqpe+6-SHOME-name
                    "c:/progra~1/TIBCO/splus81")
      (setq-default inferior-Sqpe+6-program-name
                    "c:/progra~1/TIBCO/splus81/cmd/Sqpe.exe")))
  (add-to-list 'auto-mode-alist '("\\.[qsS]\\'" . S-mode))
  (add-to-list 'auto-mode-alist '("\\.[rR]\\'" . R-mode))
  (add-to-list 'auto-mode-alist '("\\.[rR][Dd]\\'" . Rd-mode))
  (add-to-list 'auto-mode-alist '("\\.[Ss][Aa][Ss]\\'" . sas-mode))
  (add-to-list 'auto-mode-alist '("\\.[Ss][Tt][Aa][Tt][Aa]\\'" . sas-mode))
  
#+end_src
* Define Rnw-mode and make LaTeX aware
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.Rnw\\'" . Rnw-mode))
  (add-to-list 'auto-mode-alist '("\\.Snw\\'" . Rnw-mode))
  
  ;; Make TeX and RefTex aware of Snw and Rnw files
  (setq reftex-file-extensions
        '(("Snw" "Rnw" "nw" "tex" ".tex" ".ltx") ("bib" ".bib")))
  (setq TeX-file-extensions
        '("Snw" "Rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))
  
  ;; Lets you do 'C-c C-c Sweave' from your Rnw file
  (defun kicker-add-Sweave ()
    (add-to-list 'TeX-command-list
                 '("Sweave" "R CMD Sweave %s"
                   TeX-run-command nil (latex-mode) :help "Run Sweave") t)
    (add-to-list 'TeX-command-list
                 '("LatexSweave" "%l %(mode) %s"
                   TeX-run-TeX nil (latex-mode) :help "Run Latex after Sweave") t)
    (setq TeX-command-default "Sweave"))
  
  (add-hook 'Rnw-mode-hook 'kicker-add-Sweave)
  
#+END_SRC

* Make Shift-Enter a magic key

Use shift-enter to split window & launch R (if not running), execute highlighted region (if R running & area highlighted), or execute current line (and move to next line, skipping comments). Nice. See http://www.emacswiki.org/emacs/EmacsSpeaksStatistics, FelipeCsaszar. Adapted to split vertically instead of horizontally.

#+BEGIN_SRC emacs-lisp
  (setq ess-ask-for-ess-directory nil)
  (setq ess-local-process-name "R")
  (setq ansi-color-for-comint-mode 'filter)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  (defun my-ess-start-R ()
    (interactive)
    (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
        (progn
          (delete-other-windows)
          (setq w1 (selected-window))
          (setq w1name (buffer-name))
          (setq w2 (split-window w1 nil t))
          (R)
          (set-window-buffer w2 "*R*")
          (set-window-buffer w1 w1name))))
  (defun my-ess-eval ()
    (interactive)
    (my-ess-start-R)
    (if (and transient-mark-mode mark-active)
        (call-interactively 'ess-eval-region)
      (call-interactively 'ess-eval-line-and-step))
    (when (eobp) ;; Bug Fix to allow end of buffer to insert line
      (insert "\n")))
  
  (defun kicker-ess-add-shift-return ()
    (when (boundp 'auto-indent-alternate-return-function-for-end-of-line-then-newline)
      (set (make-local-variable 'auto-indent-alternate-return-function-for-end-of-line-then-newline)
           'my-ess-eval))
    (local-set-key [(shift return)] 'my-ess-eval))
  
  (defun kicker-add-control-up-and-down ()
    (local-set-key [C-up] 'comint-previous-input)
    (local-set-key [C-down] 'comint-next-input))
  
  (add-hook 'ess-mode-hook 'kicker-ess-add-shift-return)
  (add-hook 'inferior-ess-mode-hook 'kicker-add-control-up-and-down)
  (add-hook 'Rnw-mode-hook 'kicker-ess-add-shift-return)
  
#+END_SRC

* Auto-completion Engine for R
I use the auto-complete mode and would like it to work with R.  Load
it if available.
#+BEGIN_SRC emacs-lisp
  (defun kicker-ess-turn-on-ac-R ()
    (require 'auto-complete-mode nil t)
    (when (featurep 'auto-complete)
      (require 'ac-R)))
  (add-hook 'ess-mode-hook 'kicker-ess-turn-on-ac-R)
  
#+END_SRC

* R-autoyas
I also like the R-autoyas completion. 
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'r-autoyas-ess-activate)
      (add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
    (require 'r-autoyas nil t)
    (when (and (featurep 'r-autoyas)
               (fboundp 'r-autoyas-ess-activate))
      (add-hook 'ess-mode-hook 'r-autoyas-ess-activate)))
#+END_SRC

* ess-tracebug
This I have installed with ELPA as well.  It should be moved to ESS
soon.

#+BEGIN_SRC emacs-lisp
  (defun kicker-add-ess-tracebug ()
    (require 'ess-tracebug nil t)
    (when (featurep 'ess-tracebug)
      (add-hook 'ess-post-run-hook 'ess-tracebug t)))
  (add-hook 'ess-mode-hook 'kicker-add-ess-tracebug)
  
#+END_SRC

* tool-tips
Taken from
http://blogisticreflections.wordpress.com/2009/10/01/r-object-tooltips-in-ess/

I have defined a function, ess-R-object-tooltip, that when
invoked, will return a tooltip with some information about the
object at point. The information returned is determined by which R
function is called. This is controlled by an alist, called
ess-R-object-tooltip-alist. The default is given below. The keys
are the classes of R object that will use the associated
function. For example, when the function is called while point is
on a factor object, a table of that factor will be shown in the
tooltip. The objects must of course exist in the associated
inferior R process for this to work. The special key "other" in
the alist defines which function to call when the class is not
mached in the alist. By default, the str function is called, which
is actually a fairly useful default for data.frame and function
objects.

#+BEGIN_SRC emacs-lisp
  
  ;; the alist
  (setq ess-R-object-tooltip-alist
        '((numeric    . "summary")
          (factor     . "table")
          (integer    . "summary")
          (lm         . "summary")
          (data.frame . "summary")
          (other      . "str")))
  
  (defun ess-R-object-tooltip ()
    "Get info for object at point, and display it in a tooltip."
    (interactive)
    (let ((objname (current-word))
          (curbuf (current-buffer))
          (tmpbuf (get-buffer-create "**ess-R-object-tooltip**")))
      (if objname
          (progn
            (ess-command (concat "class(" objname ")\n")  tmpbuf )
            (set-buffer tmpbuf)
            (let ((bs (buffer-string)))
              (if (not(string-match "\(object .* not found\)\|unexpected" bs))
                  (let* ((objcls (buffer-substring
                                  (+ 2 (string-match "\".*\"" bs))
                                  (- (point-max) 2)))
                         (myfun (cdr(assoc-string objcls
                                                  ess-R-object-tooltip-alist))))
                    (progn
                      (if (eq myfun nil)
                          (setq myfun
                                (cdr(assoc-string "other"
                                                  ess-R-object-tooltip-alist))))
                      (ess-command (concat myfun "(" objname ")\n") tmpbuf)
                      (let ((bs (buffer-string)))
                        (progn
                          (set-buffer curbuf)
                          (tooltip-show-at-point bs 0 30)))))))))
      (kill-buffer tmpbuf)))
  
  ;; default key map
  (defun kicker-add-tooltip-key ()
    (local-set-key "\C-ct" 'ess-R-object-tooltip))
  (add-hook 'ess-mode-hook 'kicker-add-tooltip-key)
  (provide 'ess-R-object-tooltip)
  
  
#+END_SRC

* SweaveCache
From:
http://blog.nguyenvq.com/2009/05/14/editingadding-on-to-sweave-features-in-ess/
#+BEGIN_SRC emacs-lisp
  ;; changed by vinh
  (defun ess-swv-run-in-R2 (cmd &optional choose-process)
    "Run \\[cmd] on the current .Rnw file. Utility function not called by user."
    (let* ((rnw-buf (current-buffer)))
      (if choose-process ;; previous behavior
          (ess-force-buffer-current "R process to load into: ")
        ;; else
        (update-ess-process-name-list)
        (cond ((= 0 (length ess-process-name-list))
               (message "no ESS processes running; starting R")
               (sit-for 1); so the user notices before the next msgs/prompt
               (R)
               (set-buffer rnw-buf)
               )
              ((not (string= "R" (ess-make-buffer-current))); e.g. Splus, need R
               (ess-force-buffer-current "R process to load into: "))
              ))
  
      (save-excursion
        (ess-execute (format "require(tools)")) ;; Make sure tools is loaded.
        (basic-save-buffer); do not Sweave/Stangle old version of file !
        (let* ((sprocess (get-ess-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (rnw-file (buffer-file-name))
               (Rnw-dir (file-name-directory rnw-file))
               (Sw-cmd
                (format
                 "local({..od <- getwd(); setwd(%S); %s(%S, cacheSweaveDriver()); setwd(..od) })"
                 Rnw-dir cmd rnw-file))
               )
          (message "%s()ing %S" cmd rnw-file)
          (ess-execute Sw-cmd 'buffer nil nil)
          (switch-to-buffer rnw-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))
  
  (defun ess-swv-weave2 ()
    "Run Sweave on the current .Rnw file."
    (interactive)
    (ess-swv-run-in-R2 "Sweave"))
  ;; This is a modification to allow dynamic loading of Rnw-mode.
  (when (not (boundp 'Rnw-mode-hook))
    (setq Rnw-mode-hook nil ))
  (defun kicker-add-weave2-key ()
    (define-key noweb-minor-mode-map "\M-nw" 'ess-swv-weave2))
  (add-hook 'Rnw-mode-hook 'kicker-add-weave2-key)
  
#+END_SRC

* Hide/Show support
** R
This is more tricky since R is actually `ess-mode'

#+begin_src emacs-lisp
  (defun kicker-turn-on-r-hide-show ()
    (when (string= "S" ess-language)
      (set (make-local-variable 'hs-special-modes-alist) '((ess-mode "{" "}" "#" nil nil)))
      (hs-minor-mode 1)
      (when (fboundp 'foldit-mode)
        (foldit-mode 1))
      (when (fboundp 'fold-dwim-org/minor-mode)
        (fold-dwim-org/minor-mode))))
  (add-hook 'ess-mode-hook 'kicker-turn-on-r-hide-show)
  
#+end_src

* Org-table comment mode
I like to have the ability to use org-tables in comments.  For R, this
can be accomplished by org-table-comment

#+BEGIN_SRC emacs-lisp
  (add-hook 'ess-mode-hook 'kicker-turn-on-org-table-comment-mode)
  
#+END_SRC
* Add Generalized Kicker Coding Hook.
#+BEGIN_SRC emacs-lisp
  (add-hook 'ess-mode-hook 'run-kicker-coding-hook)
#+END_SRC
* Paste paths correctly and strip code ">" and "+"
Using auto-indent-mode, paste =c:\= to =c:/=
#+BEGIN_SRC emacs-lisp
  (defun kicker-ess-fix-path (beg end)
    "Fixes ess path"
    (save-restriction
      (save-excursion
        (narrow-to-region beg end)
        (goto-char (point-min))
        (when (looking-at "[A-Z]:\\\\")
          (while (search-forward "\\" nil t)
            (replace-match "/"))))))
  
  (defun kicker-ess-turn-on-fix-path ()
    (interactive)
    (when (string= "S" ess-language)
      (add-hook 'auto-indent-after-yank-hook 'kicker-ess-fix-path t t)))
  (add-hook 'ess-mode-hook 'kicker-ess-turn-on-fix-path)
  
#+END_SRC

Also take off unnecessary ">" and "+" for example copying:
: > ## set up
: > availDists <- c(Normal="rnorm", Exponential="rexp")
: > availKernels <- c("gaussian", "epanechnikov", "rectangular",
: + "triangular", "biweight", "cosine", "optcosine")


Should give:
: ## set up
: availDists <- c(Normal="rnorm", Exponential="rexp")
: availKernels <- c("gaussian", "epanechnikov", "rectangular",
: "triangular", "biweight", "cosine", "optcosine")

#+BEGIN_SRC emacs-lisp
  (defun kicker-ess-fix-code (beg end)
    "Fixes ess path"
    (save-restriction
      (save-excursion
        (save-match-data
          (narrow-to-region beg end)
          (goto-char (point-min))
          (while (re-search-forward "^[ \t]*[>][ \t]+" nil t)
            (replace-match "")
            (goto-char (point-at-eol))
            (while (looking-at "[ \t\n]*[+][ \t]+")
              (replace-match "\n")
              (goto-char (point-at-eol))))))))
  
  (defun kicker-ess-turn-on-fix-code ()
    (interactive)
    (when (string= "S" ess-language)
      (add-hook 'auto-indent-after-yank-hook 'kicker-ess-fix-code t t)))
  (add-hook 'ess-mode-hook 'kicker-ess-turn-on-fix-code)
  
#+END_SRC



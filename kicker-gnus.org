#+TITLE: Kicker Gnus
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:kicker.gnus][Emacs Kicker]].

* Kicker Gnus
Configuration for the notoriously difficult to configure [[http://www.gnus.org/][Gnus]] email
client

** IMAP
  :PROPERTIES:
  :CUSTOM_ID: imap
  :END:
Based on the instructions at [[http://www.emacswiki.org/emacs/GnusGmail#toc2][emacswiki:GnusGmail]].

to use this file:
1) /personal information/ in this file (specifically in the code
   blocks which will be tangled in the next step) globally replace
   "your-name" with your gmail username, and "your-password" with your
   gmail password.

2) /tangle this file/ Run the =org-babel-tangle= command to extract
   the code embedded in this file into a =starter-git-gnus-imap.el=
   file which can be added to your configuration, and a =~/.authinfo=
   file which will be used by gnus.

3) /load this configuration/ If you have a recent version of Org-mode
   (i.e. after 7.0) or are using the [[http://eschulte.github.com/emacs24-kicker/][literate Emacs Kicker]], then
   this file can be loaded directly using the =org-babel-load-file=
   function, or by placing it in your load path (if you're using the
   kicker).
     
   Alternately ensure that the =gnus-gmail.el= file generated by the
   previous step is loaded by your configuration.

4) /fire up gnus/ This can be done with the command =M-x gnus=

5) /view your mail/ After gnus boots up you will see the "Group
   Buffer" (see [[http://www.gnu.org/software/emacs/manual/html_node/gnus/index.html#toc_Group-Buffer][Group-Buffer]]).  Each line is a mail "Group", hit
   =SPACE= or =ENTER= on a group to view it's contents.  You should
   see an "INBOX" group which contains the mail in your gmail account.
   If not, you can jump to the "INBOX" group by
     - pressing =j= for "jump"
     - tab completing the name "INBOX"
     - pressing =U= for "unkill" meaning this will now always be
       displayed in your Group buffer when you have new mail

6) /customize/ Gnus has unrivalled capacity for customization.  Once
   your comfortable with basic usage, take some time to browse through
   the very readable [[http://www.gnu.org/software/emacs/manual/html_node/gnus/index.html][Gnus Manual]] to learn untold tricks (see also
   [[file:kicker-gnus.org::#customization][kicker-gnus:Customizations]]).

*** saving mail locally
Where your mail will be saved locally default value will be =~/gmail=.
#+begin_src emacs-lisp
  (require 'gnus)
  (setq nnml-directory "~/gmail")
  (setq message-directory "~/gmail")
#+end_src

All Gmail groups will be ignored by the default value of
=gnus-ignored-newsgroups=, so let's change that default value.
#+begin_src emacs-lisp
  (setq gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\”]\”[#’()]")
#+end_src

*** getting mail
Set Gmail as the primary source for incoming mail (Gnus can aggregate
many email and/or newsgroup sources).
#+begin_src emacs-lisp
  (setq gnus-select-method
        '(nnimap "gmail"
                 (nnimap-address "imap.gmail.com")
                 (nnimap-server-port 993)
                 (nnimap-stream ssl)))
#+end_src

Place a line like the following in =~/.authinfo=
#+begin_src fundamental :tangle ~/.authinfo
  machine imap.gmail.com login your-name@gmail.com password your-password port 993
#+end_src

and make sure that no-one else can read it with
#+begin_src sh
  chmod 600 ~/.authinfo
#+end_src

*** sending mail
/Requirement/: gnus uses the [[http://en.wikipedia.org/wiki/STARTTLS][starttls]] tool for encrypted sending of
email to the Gmail SMTP server.  This is easily installed on modern
Debian (including Ubuntu) systems with
#+begin_src sh
  apt-get install starttls
#+end_src

However in Windows it is not quite so straight forward.  You need
GhuTLS, which is included with EmacsPortable.App, and a patch to deal
with the =^M= problem described [[http://www.normalesup.org/~martinez/emacs/#gnutls_windows][here]].

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (progn
        ;; Patch smtpmail-via-smtp to ignore the ^M characters at the end of
        ;; each line of the process buffer when reading extensions.
  
        (setq starttls-use-gnutls t)
  
        (require 'smtpmail) ; smtpmail-via-smtp comes from here
  
        (defun smtpmail-via-smtp (recipient smtpmail-text-buffer)
          (let ((process nil)
                (host (or smtpmail-smtp-server
                          (error "`smtpmail-smtp-server' not defined")))
                (port smtpmail-smtp-service)
                ;; `smtpmail-mail-address' should be set to the appropriate
                ;; buffer-local value by the caller, but in case not:
                (envelope-from (or smtpmail-mail-address
                                   (and mail-specify-envelope-from
                                        (mail-envelope-from))
                                   user-mail-address))
                response-code
                greeting
                process-buffer
                (supported-extensions '()))
            (unwind-protect
                (catch 'done
                  ;; get or create the trace buffer
                  (setq process-buffer
                        (get-buffer-create (format "*trace of SMTP session to %s*" host)))
  
                  ;; clear the trace buffer of old output
                  (with-current-buffer process-buffer
                    (setq buffer-undo-list t)
                    (erase-buffer))
  
                  ;; open the connection to the server
                  (setq process (smtpmail-open-stream process-buffer host port))
                  (and (null process) (throw 'done nil))
  
                  ;; set the send-filter
                  (set-process-filter process 'smtpmail-process-filter)
  
                  (with-current-buffer process-buffer
                    (set-buffer-process-coding-system 'raw-text-unix 'raw-text-unix)
                    (make-local-variable 'smtpmail-read-point)
                    (setq smtpmail-read-point (point-min))
  
  
                    (if (or (null (car (setq greeting (smtpmail-read-response process))))
                            (not (integerp (car greeting)))
                            (>= (car greeting) 400))
                        (throw 'done nil))
                    
                    (let ((do-ehlo t)
                          (do-starttls t))
                      (while do-ehlo
                        ;; EHLO
                        (smtpmail-send-command process (format "EHLO %s" (smtpmail-fqdn)))
  
                        (if (or (null (car (setq response-code
                                                 (smtpmail-read-response process))))
                                (not (integerp (car response-code)))
                                (>= (car response-code) 400))
                            (progn
                              ;; HELO
                              (smtpmail-send-command
                               process (format "HELO %s" (smtpmail-fqdn)))
  
                              (if (or (null (car (setq response-code
                                                       (smtpmail-read-response process))))
                                      (not (integerp (car response-code)))
                                      (>= (car response-code) 400))
                                  (throw 'done nil)))
                          (dolist (line (cdr (cdr response-code)))
                            (let ((name
                                   (with-case-table ascii-case-table
                                     (mapcar (lambda (s) (intern (downcase s)))
                                             (split-string (substring line 4 (- (length line) 1)) "[ ]")))))
                              (and (eq (length name) 1)
                                   (setq name (car name)))
                              (and name
                                   (cond ((memq (if (consp name) (car name) name)
                                                '(verb xvrb 8bitmime onex xone
                                                       expn size dsn etrn
                                                       enhancedstatuscodes
                                                       help xusr
                                                       auth=login auth starttls))
                                          (setq supported-extensions
                                                (cons name supported-extensions)))
                                         (smtpmail-warn-about-unknown-extensions
                                          (message "Unknown extension %s" name)))))))
  
                        (if (and do-starttls
                                 (smtpmail-find-credentials smtpmail-starttls-credentials host port)
                                 (member 'starttls supported-extensions)
                                 (numberp (process-id process)))
                            (progn
                              (smtpmail-send-command process (format "STARTTLS"))
                              (if (or (null (car (setq response-code (smtpmail-read-response process))))
                                      (not (integerp (car response-code)))
                                      (>= (car response-code) 400))
                                  (throw 'done nil))
                              (starttls-negotiate process)
                              (setq do-starttls nil))
                          (setq do-ehlo nil))))
  
                    (smtpmail-try-auth-methods process supported-extensions host port)
  
                    (if (or (member 'onex supported-extensions)
                            (member 'xone supported-extensions))
                        (progn
                          (smtpmail-send-command process (format "ONEX"))
                          (if (or (null (car (setq response-code (smtpmail-read-response process))))
                                  (not (integerp (car response-code)))
                                  (>= (car response-code) 400))
                              (throw 'done nil))))
  
                    (if (and smtpmail-debug-verb
                             (or (member 'verb supported-extensions)
                                 (member 'xvrb supported-extensions)))
                        (progn
                          (smtpmail-send-command process (format "VERB"))
                          (if (or (null (car (setq response-code (smtpmail-read-response process))))
                                  (not (integerp (car response-code)))
                                  (>= (car response-code) 400))
                              (throw 'done nil))))
  
                    (if (member 'xusr supported-extensions)
                        (progn
                          (smtpmail-send-command process (format "XUSR"))
                          (if (or (null (car (setq response-code (smtpmail-read-response process))))
                                  (not (integerp (car response-code)))
                                  (>= (car response-code) 400))
                              (throw 'done nil))))
  
                    ;; MAIL FROM:<sender>
                    (let ((size-part
                           (if (or (member 'size supported-extensions)
                                   (assoc 'size supported-extensions))
                               (format " SIZE=%d"
                                       (with-current-buffer smtpmail-text-buffer
                                         ;; size estimate:
                                         (+ (- (point-max) (point-min))
                                            ;; Add one byte for each change-of-line
                                            ;; because of CR-LF representation:
                                            (count-lines (point-min) (point-max)))))
                             ""))
                          (body-part
                           (if (member '8bitmime supported-extensions)
                               ;; FIXME:
                               ;; Code should be added here that transforms
                               ;; the contents of the message buffer into
                               ;; something the receiving SMTP can handle.
                               ;; For a receiver that supports 8BITMIME, this
                               ;; may mean converting BINARY to BASE64, or
                               ;; adding Content-Transfer-Encoding and the
                               ;; other MIME headers.  The code should also
                               ;; return an indication of what encoding the
                               ;; message buffer is now, i.e. ASCII or
                               ;; 8BITMIME.
                               (if nil
                                   " BODY=8BITMIME"
                                 "")
                             "")))
                      ;; (smtpmail-send-command process (format "MAIL FROM:%s@%s" (user-login-name) (smtpmail-fqdn)))
                      (smtpmail-send-command process (format "MAIL FROM:<%s>%s%s"
                                                             envelope-from
                                                             size-part
                                                             body-part))
  
                      (if (or (null (car (setq response-code (smtpmail-read-response process))))
                              (not (integerp (car response-code)))
                              (>= (car response-code) 400))
                          (throw 'done nil)))
  
                    ;; RCPT TO:<recipient>
                    (let ((n 0))
                      (while (not (null (nth n recipient)))
                        (smtpmail-send-command process (format "RCPT TO:<%s>" (smtpmail-maybe-append-domain (nth n recipient))))
                        (setq n (1+ n))
  
                        (setq response-code (smtpmail-read-response process))
                        (if (or (null (car response-code))
                                (not (integerp (car response-code)))
                                (>= (car response-code) 400))
                            (throw 'done nil))))
  
                    ;; DATA
                    (smtpmail-send-command process "DATA")
  
                    (if (or (null (car (setq response-code (smtpmail-read-response process))))
                            (not (integerp (car response-code)))
                            (>= (car response-code) 400))
                        (throw 'done nil))
  
                    ;; Mail contents
                    (smtpmail-send-data process smtpmail-text-buffer)
  
                    ;; DATA end "."
                    (smtpmail-send-command process ".")
  
                    (if (or (null (car (setq response-code (smtpmail-read-response process))))
                            (not (integerp (car response-code)))
                            (>= (car response-code) 400))
                        (throw 'done nil))
  
                    ;; QUIT
                    ;; (smtpmail-send-command process "QUIT")
                    ;; (and (null (car (smtpmail-read-response process)))
                    ;;      (throw 'done nil))
                    t))
              (if process
                  (with-current-buffer (process-buffer process)
                    (smtpmail-send-command process "QUIT")
                    (smtpmail-read-response process)
  
                    ;; (if (or (null (car (setq response-code (smtpmail-read-response process))))
                    ;;         (not (integerp (car response-code)))
                    ;;         (>= (car response-code) 400))
                    ;;       (throw 'done nil))
                    (delete-process process)
                    (unless smtpmail-debug-info
                      (kill-buffer process-buffer)))))))
  
        ;; Patch starttls-negotiate-gnutls to send ^Z (Windows EOF) instead of
        ;; a signal.
  
        (require 'starttls) ; starttls-negotiate-gnutls comes from here
  
        (defun starttls-negotiate-gnutls (process)
          "Negotiate TLS on PROCESS opened by `open-starttls-stream'.
  This should typically only be done once.  It typically returns a
  multi-line informational message with information about the
  handshake, or nil on failure."
          (let (buffer info old-max done-ok done-bad)
            (if (null (setq buffer (process-buffer process)))
                ;; XXX How to remove/extract the TLS negotiation junk?
                                          ; (signal-process (process-id process) 'SIGALRM)
                (process-send-string process "\x1a") ; EOF for GnuTLS on Windows
              (with-current-buffer buffer
                (save-excursion
                  (setq old-max (goto-char (point-max)))
                                          ; (signal-process (process-id process) 'SIGALRM)
                  (process-send-string process "\x1a") ; EOF for GnuTLS on Windows
                  (while (and (processp process)
                              (eq (process-status process) 'run)
                              (save-excursion
                                (goto-char old-max)
                                (not (or (setq done-ok (re-search-forward
                                                        starttls-success nil t))
                                         (setq done-bad (re-search-forward
                                                         starttls-failure nil t))))))
                    (accept-process-output process 1 100)
                    (sit-for 0.1))
                  (setq info (buffer-substring-no-properties old-max (point-max)))
                  (delete-region old-max (point-max))
                  (if (or (and done-ok (not done-bad))
                          ;; Prevent mitm that fake success msg after failure msg.
                          (and done-ok done-bad (< done-ok done-bad)))
                      info
                    (message "STARTTLS negotiation failed: %s" info)
                    nil))))))))
  
  
#+END_SRC

The following configures gnus to use the Gmail SMTP server for sending
email.
#+begin_src emacs-lisp
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        smtpmail-auth-credentials '(("smtp.gmail.com" 587 "your-name@gmail.com" nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)
#+end_src

If you don't want to be prompted for a password on every mail sent,
you can add the following line to your =~/.authinfo=.
#+begin_src fundamental :tangle ~/.authinfo
  machine smtp.gmail.com login your-name@gmail.com your-password secret port 587
#+end_src

** Pop
  :PROPERTIES:
  :CUSTOM_ID: pop
  :END:
This file can be used to jump start a working Gnus instillation.  The
following steps will result in a working vanilla Gnus POP
instillation.
1) install the [[required-packages]]
2) follow the [[gmail]] specific instructions
3) tangle this file with `org-babel-tangle' (with C-c M-b t) creating
   the =kicker-gnus-pop.el= file which can be loaded by Emacs

(if you run into any problems -- the [[http://www.gnus.org/manual.html][gnus manual]] is very thorough)

*** Basic configuration
First off, load up =gnus=
#+begin_src emacs-lisp
  (require 'gnus)
#+end_src

Tell gnus that your mainly going to be using it for email not as a
news reader -- after all it's not longer the late 80s.
#+begin_src emacs-lisp
  (setq gnus-select-method '(nnml ""))
#+end_src

*** Required packages
   :PROPERTIES:
   :CUSTOM_ID: required-packages
   :END:
A [[http://en.wikipedia.org/wiki/STARTTLS][starttls]] client allows encrypted communication with remote pop3 and
IMAP email clients.

[[http://www.openssl.org/][openssl]] implements the Secure Socket Layer (SSL) secure communication
protocol.

On Debian systems (including Ubuntu) instillation of =starttls= and
=openssl= client is as simple as
: sudo apt-get install starttls openssl

For the windows systems, EmacsPortable.App installs this with the
gnuwin32 install.

*** Gmail Setup
   :PROPERTIES:
   :CUSTOM_ID: gmail
   :END:
For more information on configuring Gnus with Gmail see [[http://www.emacswiki.org/emacs/GnusGmail][GnusGmail]] on
the Emacs Wiki.

For a simple pop3 setup, simply replace =your-gmail-email-address= and
=your-gmail-password= with your gmail account information in the
following tables.

#+results: gmail-configuration
| email    | your-gmail-email-address |
| password | your-gmail-password      |

#+begin_src emacs-lisp :var config=gmail-configuration
  (let ((email (second (first config)))
        (passwd (second (second config))))
    ;; The following adds Gmail as a source of mail for Gnus
    (add-to-list 'mail-sources
                 `(pop :server "pop.gmail.com"
                       :port 995
                       :user ,email
                       :password ,passwd
                       :stream ssl))
    ;; The following is used for sending email through gmail using SMTP.
    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-starttls-credentials '(("smtp.gmail.com" 25 nil nil))
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 25
          user-mail-address email
          smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials `(("smtp.gmail.com" 587 ,email ,passwd))
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587))
#+end_src

** Customizations
  :PROPERTIES:
  :CUSTOM_ID: customization
  :END:
Once gnus is installed and working, here are some recommended Gnus
customizations.

*** BBDB
    :PROPERTIES:
    :CUSTOM_ID: bbdb
    :END:
[[http://bbdb.sourceforge.net/][BBDB]] -- _The Insidious Big Brother Database_ is Emacs' contact manager
which is very useful for keeping all of your contacts organized for
use with gnus.

#+begin_src emacs-lisp
  ;;; bbdb
  (require 'bbdb)
  (require 'bbdb-autoloads)
  (setq
   bbdb-file "~/.bbdb"
   bbdb-offer-save 'auto
   bbdb-notice-auto-save-file t
   bbdb-expand-mail-aliases t
   bbdb-canonicalize-redundant-nets-p t
   bbdb-always-add-addresses t
   bbdb-complete-name-allow-cycling t
   )
#+end_src

*** More attractive Summary View
    :PROPERTIES:
    :CUSTOM_ID: pretty-summary
    :END:
Thanks to Dan Davison.

#+begin_src emacs-lisp
  ;; http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f
  (when window-system
    (setq gnus-sum-thread-tree-indent "  ")
    (setq gnus-sum-thread-tree-root "") ;; "● ")
    (setq gnus-sum-thread-tree-false-root "") ;; "◯ ")
    (setq gnus-sum-thread-tree-single-indent "") ;; "◎ ")
    (setq gnus-sum-thread-tree-vertical        "│")
    (setq gnus-sum-thread-tree-leaf-with-other "├─► ")
    (setq gnus-sum-thread-tree-single-leaf     "╰─► "))
  (setq gnus-summary-line-format
        (concat
         "%0{%U%R%z%}"
         "%3{│%}" "%1{%d%}" "%3{│%}" ;; date
         "  "
         "%4{%-20,20f%}"               ;; name
         "  "
         "%3{│%}"
         " "
         "%1{%B%}"
         "%s\n"))
  (setq gnus-summary-display-arrow t)
#+end_src
